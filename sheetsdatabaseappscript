//This is the appscript to put on Sheets to receive data on the sheets and send it to Google Chat
//Just add the ?(columnname)={{GTM variable}}&(columnname)={{GTM variable}} to the AppScript URL to add value to sheets and Google Chat
//Put the AppScript URL on Imagetag and fire using Trigger

var SHEET_NAME = "data_undian";
var SHEET_KEY = "1v0vpQ0A-68o4dIei-As6-qIi9GoYS_jJrY_3_JgJos0";
var CHAT_WEBHOOK_URL = "https://chat.googleapis.com/v1/spaces/AAAASl32Tls/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=oRKKchDOaVV5xvc-nF8KtUkiH5pOOcmkhJJRDJhcqXM";

function doGet(e) {
    return handleResponse(e);
}

function doPost(e) {
    return handleResponse(e);
}

function handleResponse(e) {
    var lock = LockService.getPublicLock();
    lock.waitLock(30000); // wait 30 seconds before conceding defeat.

    try {
        // Open the spreadsheet and select the appropriate sheet
        var doc = SpreadsheetApp.openById(SHEET_KEY);
        var sheet = doc.getSheetByName(SHEET_NAME);

        // Assume the header is in row 1
        var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
        var nextRow = sheet.getLastRow() + 1; // Get next available row
        var row = [];
        var message = "New data received:\n";

        // Loop through the headers
        for (var i = 0; i < headers.length; i++) {
            var header = headers[i];
            var value = e.parameter[header];
            if (header == "Timestamp") { // Special case for 'Timestamp' column
                value = new Date(); // Automatically add the current timestamp
            }
            row.push(value);
            message += header + ": " + (value || "undefined") + "\n";
        }

        // Write data to Google Sheets
        sheet.getRange(nextRow, 1, 1, row.length).setValues([row]);

        // Send data to Google Chat
        sendToGoogleChat(message);

        // Return JSON success results
        return ContentService
            .createTextOutput(JSON.stringify({ "result": "success", "row": nextRow }))
            .setMimeType(ContentService.MimeType.JSON);
    } catch (e) {
        // If error, return this
        return ContentService
            .createTextOutput(JSON.stringify({ "result": "error", "error": e.message }))
            .setMimeType(ContentService.MimeType.JSON);
    } finally {
        // Release lock
        lock.releaseLock();
    }
}

function sendToGoogleChat(message) {
    try {
        var payload = JSON.stringify({ "text": message });
        var options = {
            "method": "post",
            "contentType": "application/json",
            "payload": payload
        };

        // Send the POST request to Google Chat webhook
        var response = UrlFetchApp.fetch(CHAT_WEBHOOK_URL, options);
        Logger.log("Google Chat response: " + response.getContentText());
    } catch (error) {
        Logger.log("Failed to send to Google Chat: " + error.message);
    }
}
